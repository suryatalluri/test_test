/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/

package com.test_test.mytestdatabase.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_test.mytestdatabase.*;


/**
 * ServiceImpl object for domain model class Login.
 * @see com.test_test.mytestdatabase.Login
 */
@Service("MyTestDatabase.LoginService")
public class LoginServiceImpl implements LoginService {


    private static final Logger LOGGER = LoggerFactory.getLogger(LoginServiceImpl.class);

    @Autowired
    @Qualifier("MyTestDatabase.LoginDao")
    private WMGenericDao<Login, Integer> wmGenericDao;
    public void setWMGenericDao(WMGenericDao<Login, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "MyTestDatabaseTransactionManager")
     public Page<Login> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "MyTestDatabaseTransactionManager")
    @Override
    public Login create(Login login) {
        LOGGER.debug("Creating a new login with information: {}" , login);
        return this.wmGenericDao.create(login);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "MyTestDatabaseTransactionManager")
    @Override
    public Login delete(Integer loginId) throws EntityNotFoundException {
        LOGGER.debug("Deleting login with id: {}" , loginId);
        Login deleted = this.wmGenericDao.findById(loginId);
        if (deleted == null) {
            LOGGER.debug("No login found with id: {}" , loginId);
            throw new EntityNotFoundException(String.valueOf(loginId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "MyTestDatabaseTransactionManager")
    @Override
    public Page<Login> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all logins");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "MyTestDatabaseTransactionManager")
    @Override
    public Page<Login> findAll(Pageable pageable) {
        LOGGER.debug("Finding all logins");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "MyTestDatabaseTransactionManager")
    @Override
    public Login findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding login by id: {}" , id);
        Login login=this.wmGenericDao.findById(id);
        if(login==null){
            LOGGER.debug("No login found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return login;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "MyTestDatabaseTransactionManager")
    @Override
    public Login update(Login updated) throws EntityNotFoundException {
        LOGGER.debug("Updating login with information: {}" , updated);
        this.wmGenericDao.update(updated);
        return this.wmGenericDao.findById((Integer)updated.getId());
    }

    @Transactional(readOnly = true, value = "MyTestDatabaseTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


